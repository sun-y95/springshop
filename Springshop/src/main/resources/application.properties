

server.port=80
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/springshop
spring.datasource.username=suny
spring.datasource.password=1234

#여긴주석...
spring.jpa.show-sql=true

#아래는 프로젝트 실행시에 자동으로 DDL 생성여부 결정..create 은 매번 생성, update 는 변경이 필요시 alter, 없는 경우 create 됨.\

spring.jpa.hibernate.ddl-auto=update

#실제 JPA 구현체인 Hibernate 가 동작하면서 발생하는 SQL 출력하는 속성

spring.jpa.properties.hibernate.format_sql=true

#JPA 처리시 발생하는 SQL을 보여줄지 여부 속성

spring.jpa.properties.hibernate.show-sql=true

#바인딩되는 파라미터 값 출력

logging.level.org.hibernate.type.descriptor.sql=trace

spring.jpa.open-in-view=true

logging.level.web=debug

logging.level.org.hibernate.SQL=DEBUG

logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

spring.mvc.log-request-details=true

spring.jpa.properties.hibernate.highlight_sql=true

spring.jpa.properties.hibernate.use_sql_comments=true


#서블릿의 Multipart를 활성화 해주는 속성. 기본적으로 서블릿을 확장한 #API를 스프링부트에서 파일 업로드에 사용한다.
spring.servlet.multipart.enabled=true

#파일 하나당 최대 사이즈 설정. default 1MB
spring.servlet.multipart.max-file-size=10MB
#한 번에 최대 업로드 가능한 사이즈 설정
spring.servlet.multipart.max-request-size=100MB

spring.mail.username= # Typing here your google email account
spring.mail.password= # Typing here your google email password
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# GOOGLE OAUTH2
spring.profiles.include=oauth2
spring.security.oauth2.client.registration.google.client-id= # Typing here your google client id.
spring.security.oauth2.client.registration.google.client-secret= # Typing here your google client secret key.
spring.security.oauth2.client.registration.google.scope=profile, email

# NAVER OAUTH2
spring.security.oauth2.client.registration.naver.client-id= # Typing here your naver client id
spring.security.oauth2.client.registration.naver.client-secret= # Typing here your naver client secret key
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=nickname,email,gender,age,profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver

# provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# KAKAO OAUTH2
# spring.security.oauth2.client.registration.kakao.client-id=
# spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
# spring.security.oauth2.client.registration.kakao.client-authentication-method=post
# spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.kakao.scope=profile_nickname
# spring.security.oauth2.client.registration.kakao.client-name=Kakao
# spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
# spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
# spring.security.oauth2.client.provider.kakao.user-name-attribute=id
